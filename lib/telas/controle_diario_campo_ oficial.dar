import 'package:apppromotor/model/modeloRevenda.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import '../../model/ModeloDiarioCampo.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:uuid/uuid.dart';

class DiarioCampo extends StatefulWidget {
  const DiarioCampo({super.key});

  @override
  State<DiarioCampo> createState() => _DiarioCampoState();
}

class _DiarioCampoState extends State<DiarioCampo> {
  String uid = FirebaseAuth.instance.currentUser!.uid;

  List<Diario> listDiario = [];
  FirebaseFirestore db = FirebaseFirestore.instance;

  ValueNotifier<List<Revenda>> listRevenda = ValueNotifier([]);
  ValueNotifier<String> selected = ValueNotifier("");
  bool isLoading = false;

  @override
  void initState() {
    super.initState();
    setState(() {
      isLoading = true;
    });
  refresh();
  buscaRevenda();
}
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('Diario de Campo:'),
    ),
    floatingActionButton: FloatingActionButton(
      onPressed: () {
        // Navigator.of(context).push(MaterialPageRoute(builder: (context)=>RegistroKM(),),);
        showFormModal();
      },
      child: const Icon(Icons.add),
    ),

    body: (listDiario.isEmpty)
        ? const Center(
      child: Text(
        "Nenhuma Registro ainda.\nVamos criar o primeiro?",
        textAlign: TextAlign.center,
        style: TextStyle(fontSize: 18),
      ),
    )
        : RefreshIndicator(
      onRefresh: () {
        return refresh();
      },
      child: ListView(
        children: List.generate(listDiario.length,
                (index) {
              Diario diarioM = listDiario[index];
              return
                Card(
                    child: Dismissible(
                      key: ValueKey<Diario>(diarioM),
                      direction: DismissDirection.endToStart,
                      background: Container(
                        alignment: Alignment.centerRight,
                        padding: const EdgeInsets.only(right: 8.0),
                        color: Colors.red,
                        child: const Icon(Icons.delete),
                      ),
                      onDismissed: (diretion) {
                        remove(diarioM);
                      },
                      child: ListTile(
                        onTap: () {
                          //print("Click");
                        },
                        onLongPress: () {
                          showFormModal(model: diarioM);

                          //print("CLick e segurou");
                        },
                        title: Row(
                          children: [
                            const Text("Diario:", style: TextStyle(
                                fontSize: 24.0)),
                            Text(diarioM.titulo, style: const TextStyle(
                                fontSize: 24.0)),
                          ],
                        ),
                        subtitle: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(diarioM.idRevenda, style: const TextStyle(
                                fontSize: 16.0),),
                            Text(diarioM.data, style: const TextStyle(
                                fontSize: 16.0),),


                          ],
                        ),

                      ),
                    )
                );
            }

        ),


      ),
    ),
  );
}

showFormModal({Diario? model}) async{
  setState(() {
    isLoading = true; // Inicia o carregamento ao abrir o modal
  });

  String labelTitle = "Adicionar Diario de Campo";
  String labelConfirmationButton = "Salvar";
  String labelSkipButton = "Cancelar";


  TextEditingController tituloController = TextEditingController();
  TextEditingController textocontroller = TextEditingController();
  TextEditingController dataController = TextEditingController();
  TextEditingController id_revendaController = TextEditingController();
  if (model != null) {
    labelTitle = "Editando Diario de Campo";
    tituloController.text = model.titulo;
    textocontroller.text = model.texto;
    dataController.text = model.data;
    id_revendaController.text = model.idRevenda;
  }


  showModalBottomSheet(
    context: context,

    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.vertical(
        top: Radius.circular(24),
      ),
    ),
    builder: (context) {
      return Container(
        height: MediaQuery
            .of(context)
            .size
            .height,
        padding: const EdgeInsets.all(32.0),

        child: ListView(
          children: [
            Text(labelTitle),
            TextFormField(
              controller: tituloController,
              decoration:
              const InputDecoration(label: Text("Titulo:")),
            ),
            TextFormField(
              controller: textocontroller,
              decoration:
              const InputDecoration(label: Text("Texto")),
            ),

            TextField(
              controller: dataController,
              decoration: const InputDecoration(
                label: Text("Quando"),
                filled: true,
                prefixIcon: Icon(Icons.calendar_today),
              ),
              onTap: () async {
                DateTime? pickedDate = await showDatePicker(
                    context: context,
                    initialDate: DateTime.now(),
                    firstDate: DateTime(2000),
                    lastDate: DateTime(2100));

                if (pickedDate != null) {
                  setState(() {
                    dataController.text =
                        DateFormat('dd-MM-yyyy').format(pickedDate);
                  });
                }
              },
            ),

            ValueListenableBuilder<List<Revenda>>(
              valueListenable: listRevenda,
              builder: (context, revendas, _) {
                if (revendas.isEmpty) {
                  return Container();
                }
                return ValueListenableBuilder(
                  valueListenable: selected,
                  builder: (context, selectedValue, _) {
                    return Container(
                      decoration: BoxDecoration(
                        border: Border.all(
                          color: Colors.grey, // Cor da borda
                          width: 1.0, // Espessura da borda
                        ),
                        borderRadius: BorderRadius.circular(
                            8.0), // Bordas arredondadas
                      ),
                      padding: const EdgeInsets.symmetric(horizontal: 8.0),
                      child: DropdownButton<String>(
                        value: id_revendaController.text.isEmpty
                            ? null
                            : id_revendaController.text,
                        hint: const Text('Selecione a revenda'),
                        isExpanded: true,
                        underline: const SizedBox(),
                        // Remove a linha padr√£o
                        items: revendas.map((Revenda revenda) {
                          return DropdownMenuItem<String>(
                            value: revenda.id_revenda,
                            child: Text(revenda.nome),
                          );
                        }).toList(),
                        onChanged: (String? novoValor) {
                          id_revendaController.text = novoValor ?? '';
                          selected.value = novoValor ?? '';
                        },
                      ),
                    );
                  },
                );
              },
            ),

            const SizedBox(
              height: 16,
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                TextButton(
                  onPressed: () {
                    Navigator.pop(context);
                    setState(() {
                      isLoading = false;
                    });
                  },
                  child: Text(labelSkipButton),
                ),
                const SizedBox(
                  width: 16,
                ),
                ElevatedButton(
                  onPressed: () {
                    Diario newDiario = Diario(
                      idDiario: Uuid().v1(),
                      titulo: tituloController.text,
                      texto: textocontroller.text,
                      data: dataController.text,
                      idRevenda: id_revendaController.text,
                    );

                    if (model != null) {
                      newDiario.idDiario = model.idDiario;
                    }
                    setState(() {
                      isLoading = true;
                    });

                    db.collection('usuario/$uid/diario')
                        .doc(newDiario.idDiario)
                        .set(newDiario.toMap())
                        .then((value) {
                      refresh();
                      setState(() {
                        isLoading = false;
                      });
                      Navigator.pop(context);
                    });
                    setState(() {
                      isLoading = false;
                    });
                  },
                  child: Text(labelConfirmationButton),
                ),
              ],
            )
          ],
        ),
      );
    },
  );
}

refresh() async {
  List<Diario> temp = [];

  QuerySnapshot<Map<String, dynamic>> snapshot =
  await db.collection('usuario/$uid/diario').get();

  for (var doc in snapshot.docs) {
    temp.add(Diario.fromMap(doc.data()));
  }
  setState(() {
    listDiario = temp;
    isLoading = false;
  });
}


buscaRevenda() async {
  List<Revenda> revendas = [];
  QuerySnapshot<Map<String, dynamic>> snapshot =
  await db.collection('usuario/$uid/revenda').get();

  for (var doc in snapshot.docs) {
    revendas.add(Revenda.fromMap(doc.data()));
  }
  listRevenda.value = revendas;
}


void remove(Diario diarioM) {
  db.collection("usuario/$uid/diario").doc(diarioM.idDiario).delete();
  refresh();
}}




    
  

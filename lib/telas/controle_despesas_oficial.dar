import 'package:brasil_fields/brasil_fields.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';

import '../../model/modelo_despesa.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:uuid/uuid.dart';

import '../model/modelo_veiculo.dart';

class ControleDespesas extends StatefulWidget {
  const ControleDespesas({super.key});

  @override
  State<ControleDespesas> createState() => _ControleDespesasState();
}

class _ControleDespesasState extends State<ControleDespesas> {
  String uid = FirebaseAuth.instance.currentUser!.uid;
      List<Despesa> listDespesa = [];
      FirebaseFirestore db = FirebaseFirestore.instance;
  ValueNotifier<List<Veiculo>> listVeiculos = ValueNotifier([]);
      ValueNotifier<String> selected = ValueNotifier("");
      //bool isLoading = false;
   @override
  void initState() {
    super.initState();
    setState(() {
     // isLoading = true;
    });
    buscaVeiculo();
    refresh();
  }


Widget build(BuildContext context) {
    return  Scaffold(
      appBar: AppBar(title: const Text('Controle de Despesas'),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: (){
    // Navigator.of(context).push(MaterialPageRoute(builder: (context)=>RegistroDespesas(),),);
        showFormModal();
        },
      child: const Icon(Icons.add),
      
      ),

      body:
      // isLoading // Verifica se está carregando
      //     ? const Center(child: CircularProgressIndicator()) // Exibe o loading
      //     :
      (listDespesa.isEmpty)
        ? const Center(
             child: Text(
                "Nenhuma Registro ainda.\nVamos criar o primeiro?",
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 18),
              ),
              )
              : RefreshIndicator(
                onRefresh: (){
                  return refresh();

                },
                child:ListView(
                  children: List.generate(listDespesa.length, 
                    (index){
                     Despesa despesaControleM = listDespesa[index];
                      return 
                        Card(
                        child: Dismissible(
                          key: ValueKey<Despesa>(despesaControleM),
                          direction: DismissDirection.endToStart,
                          background: Container(
                            alignment: Alignment.centerRight,
                            padding: const EdgeInsets.only(right: 8.0),
                            color: Colors.red,
                          child: const Icon(Icons.delete),
                          ),
                          onDismissed: (diretion){
                            remove(despesaControleM);
                          },
                          child: ListTile(
                            onTap: (){
                              //print("Click");
                            },
                            onLongPress: (){
                                showFormModal(model: despesaControleM);
                          
                              //print("CLick e segurou");
                            },
                          title:Row(
                            children: [
                              const Text("NF :",style: TextStyle(fontSize: 24.0)),
                              Text( despesaControleM.numeroNf , style: const TextStyle(fontSize: 24.0) ),
                            ],
                          ),
                          subtitle: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween ,
                            children: [
                            Text( despesaControleM.oQue, style: const TextStyle(fontSize: 16.0),),
                            Text( despesaControleM.quando, style: const TextStyle(fontSize: 16.0),),
                            Text( despesaControleM.preco, style: const TextStyle(fontSize: 16.0),),
                                                     
                                              ],
                                        ),
                                        
                                      ),
                        )
          );
        }

        ),
      
      
      ),
      ),
      







    );

}

  
  showFormModal({Despesa? model}) {
    setState(() {
     // isLoading = true; // Inicia o carregamento ao abrir o modal
    });


    String labelTitle = " Registrar Despesa";
    String labelConfirmationButton = "Salvar";
    String labelSkipButton = "Cancelar";
    TextEditingController idController = TextEditingController();
    TextEditingController numroNfController = TextEditingController();
    TextEditingController oQueController = TextEditingController();
    TextEditingController ondeController = TextEditingController();
    TextEditingController quandoController = TextEditingController();
    quandoController.text = DateFormat('dd-MM-yyyy').format(DateTime.now());

    TextEditingController precoController = TextEditingController();
    TextEditingController kmController = TextEditingController();
    TextEditingController idVeiculoController = TextEditingController();
    TextEditingController id_imagem_controller = TextEditingController();

    if(model !=null){
      labelTitle = "Editando despesa";
      idController.text = model.idDespesa;
      numroNfController.text = model.numeroNf;
      oQueController.text = model.oQue;
      quandoController.text = model.quando;
      ondeController.text =  model.onde;
      precoController.text = model.preco;
      kmController.text = model.km ;
      idVeiculoController.text = model.id_veiculo;
      id_imagem_controller.text = model.idImagem;
   }
   showModalBottomSheet(
      context: context,

      // Define que as bordas verticais serão arredondadas
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(
          top: Radius.circular(24),
        ),
      ),
      builder: (context) {
        return Container(
          height: MediaQuery.of(context).size.height,
          padding: const EdgeInsets.all(32.0),

          // Formulário com Título, Campo e Botões
          child: ListView(
            children: [
              Text(labelTitle),
              TextFormField(

                keyboardType: TextInputType.number,
                controller: numroNfController,
                decoration:
                    const InputDecoration(
                      label: Text("Numero Nota fiscal:"),

                    ),
              ),
              TextFormField(
                controller: oQueController,
                decoration:
                    const InputDecoration(label: Text("O que:")),
              ),TextFormField(
                controller: ondeController,
                decoration:
                    const InputDecoration(label: Text("Onde:")),
              ),
              TextField(

                controller: quandoController,
                decoration: const InputDecoration(
                  label: Text("Quando"),
                  filled: true,
                  prefixIcon: Icon(Icons.calendar_today),
                ),
                onTap: () async {
                  DateTime? pickedDate = await showDatePicker(
                      context: context,
                      initialDate: DateTime.now(),
                      firstDate: DateTime(2000),
                      lastDate: DateTime(2100));

                  if (pickedDate != null) {
                    setState(() {
                      quandoController.text =
                          DateFormat('dd-MM-yyyy').format(pickedDate);
                    });
                  }
                },
              ),

              TextFormField(
                inputFormatters: [
                  // obrigatório
                  FilteringTextInputFormatter.digitsOnly,
                  CentavosInputFormatter()
                ],
                keyboardType: TextInputType.number,
                controller: precoController,
                decoration:
                    const InputDecoration(label: Text("Preço:")),
              ),
              
              TextFormField(
                keyboardType: TextInputType.number,
                controller: kmController,
                decoration:
                    const InputDecoration(label: Text("Km")),
              ),
              // TextFormField(
              //   controller: placaController,
              //   decoration:
              //       const InputDecoration(label: Text("Placa")),
              // ),
              // const SizedBox(
              //   height: 16,
              // ),

              ValueListenableBuilder<List<Veiculo>>(
                valueListenable: listVeiculos,
                builder: (context, veiculos, ___) {
                  if (veiculos.isEmpty) {
                    return Container();
                  }
                  return ValueListenableBuilder(
                    valueListenable: selected,
                    builder: (context, selectedValue, _) {
                      return Container(
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: Colors.grey, // Cor da borda
                            width: 1.0, // Espessura da borda
                          ),
                          borderRadius:
                          BorderRadius.circular(8.0), // Bordas arredondadas
                        ),
                        padding: const EdgeInsets.symmetric(horizontal: 8.0),
                        child: DropdownButton<String>(
                          value: idVeiculoController.text.isEmpty
                              ? null
                              : idVeiculoController.text,
                          hint: const Text('Selecione o Veículo'),
                          isExpanded: true,
                          underline: const SizedBox(),
                          // Remove a linha padrão
                          items: veiculos.map((Veiculo veiculo) {
                            return DropdownMenuItem<String>(
                              value: veiculo.idVeiculo,
                              child: Text(veiculo.modelo+'Placa: '+veiculo.placa),
                            );
                          }).toList(),
                          onChanged: (String? novoValor) {
                            idVeiculoController.text = novoValor ?? '';
                            selected.value = novoValor ?? '';
                          },
                        ),
                      );
                    },
                  );
                },
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton(
                    onPressed: () {
                      Navigator.pop(context);
                      setState(() {
                        //isLoading = false;
                      });
                    },
                    child: Text(labelSkipButton),
                  ),
                  const SizedBox(
                    width: 16,
                  ),
                  ElevatedButton(
                    onPressed: () {
                     Despesa newNfcontrole = Despesa(
                      idDespesa: Uuid().v1(),
                      numeroNf: numroNfController.text,
                       oQue: oQueController.text,
                        onde: ondeController.text, 
                        quando: quandoController.text, 
                        preco: precoController.text, 
                        km: kmController.text, 
                        id_veiculo: idVeiculoController.text,
                        idImagem: id_imagem_controller.text
                        );
                          
                          if(model != null){
                                newNfcontrole.idDespesa = model.idDespesa;
                          }
                     setState(() {
                      // isLoading = true;
                     });
                          db.collection('usuario/$uid/despesa').doc(newNfcontrole.idDespesa).set(newNfcontrole.tpasteloMap());
                        refresh();
                     setState(() {
                     //  isLoading = false;
                     });
                        Navigator.pop(context);
                     setState(() {
                       //isLoading = false;
                     });
                        },
                   child: Text(labelConfirmationButton),
                  
                      ),
                       ],
              )
            ],
          ),
        );
      },
    );

    setState(() {
     // isLoading = false;
    });


  }
   refresh() async{
      List<Despesa> temp = [];

      QuerySnapshot<Map<String, dynamic>> snapshot = 
      await db.collection('usuario/$uid/despesa').get();

      for (var doc in snapshot.docs){
        temp.add(Despesa.fromMap(doc.data()));
      }
      setState(() {
        listDespesa = temp;
       // isLoading = false;
      });
  }

  buscaVeiculo() async {
    List<Veiculo> veiculos = [];
    QuerySnapshot<Map<String, dynamic>> snapshot =
    await db.collection('usuario/$uid/veiculo').get();

    for (var doc in snapshot.docs) {
      veiculos.add(Veiculo.fromMap(doc.data()));
    }
    listVeiculos.value = veiculos;
  }

  remove(Despesa despesaM){
    db.collection('usuario/$uid/despesa').doc(despesaM.idDespesa).delete();
  }
}